{"version":3,"sources":["robot.svg","components/Toxicity/predictionBox.tsx","non-toxic.svg","toxic.svg","components/Toxicity/index.tsx","jogging.svg","App.tsx","reportWebVitals.ts","index.tsx"],"names":["PredictionBox","value","text","className","toFixed","replace","Toxicity","React","setValue","predictionsList","setPredictionsList","loading","setLoading","toxic","setToxic","src","AI","NonToxic","Toxic","width","Input","fluid","type","size","placeholder","onChange","e","target","action","Button","positive","onClick","toxicity","then","model","sentences","classify","predictions","console","log","managePredictions","isToxic","i","results","match","label","probabilities","icon","Loader","active","map","p","index","App","Running","href","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"yWAAe,MAA0B,kCCO5BA,EAAgB,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KACnC,OACI,sBAAKC,UAAU,iBAAf,UACI,kCAAgB,IAARF,GAAaG,QAAQ,GAA7B,OACA,+BAAOF,EAAKG,QAAQ,IAAK,WCXtB,MAA0B,sCCA1B,MAA0B,kCCc5BC,EAAW,SAAC,GAAS,qBACJC,WAAuB,IADpB,mBACtBN,EADsB,KACfO,EADe,OAEiBD,aAFjB,mBAEtBE,EAFsB,KAELC,EAFK,OAGCH,YAAwB,GAHzB,mBAGtBI,EAHsB,KAGbC,EAHa,OAIHL,WAAwB,MAJrB,mBAItBM,EAJsB,KAIfC,EAJe,KAqC7B,OACI,sBAAKX,UAAU,gCAAf,UACI,sBAAKA,UAAU,SAAf,UACI,qBAAKY,IAAe,OAAVF,EAAiBG,GAAe,IAAVH,EAAkBI,EAAWC,EAAOC,MAAM,UAC1E,qDAEJ,qBAAKhB,UAAU,kBAAf,SACI,eAACiB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,OAAOC,KAAK,MAAMC,YAAY,MAAMC,SAV1C,SAACC,GACrBlB,EAASkB,EAAEC,OAAO1B,QASuEA,MAAOA,EAAO2B,QAAM,EAArG,UACI,0BACA,cAACC,EAAA,EAAD,CAAQC,UAAQ,EAACC,QAnCrB,WACRnB,GAAW,GAEXoB,IADkB,GACO,IAAIC,MAAK,SAAAC,GAC9B,IAAMC,EAAY,CAAClC,GACnBiC,EAAME,SAASD,GAAWF,MAAK,SAAAI,GAC3BC,QAAQC,IAAIF,GAXE,SAACA,GACvB3B,EAAmB2B,GAWXG,CAAkBH,GAElB,IADA,IAAII,GAAU,EACLC,EAAI,EAAGA,EAAI,EAAGA,IACfL,EAAYK,GAAGC,QAAQ,GAAGC,QAC1BH,GAAU,EACVH,QAAQC,IAAIF,EAAYK,GAAGG,MACvB,kCACAR,EAAYK,GAAGC,QAAQ,GAAGG,cAAc,KAGpDhC,EAAS2B,GACT7B,GAAW,UAiBwBmC,KAAK,WAAWpC,QAASA,SAKhE,qBAAKR,UAAU,UAAf,SAEI,qBAAKA,UAAU,cAAf,UACiB,IAAZQ,EAAmB,cAACqC,EAAA,EAAD,CAAQC,QAAQ,IAChCxC,GAAmBA,EAAgByC,KAAI,SAACC,EAAGC,GACvC,OACI,cAAC,EAAD,CAA2BlD,KAAMiD,EAAEN,MAAO5C,MAAOkD,EAAER,QAAQ,GAAGG,cAAc,IAAxDM,cCvErC,MAA0B,oCCyB1BC,MAdf,WAEE,OACE,gCAGE,cAAC,EAAD,IACA,sBAAKlD,UAAU,SAAf,qBACY,qBAAKY,IAAKuC,EAASnC,MAAO,KADtC,eAC4D,mBAAGoC,KAAK,6BAA6B5B,OAAO,SAA5C,gCCLnD6B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBzB,MAAK,YAAkD,IAA/C0B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.1f6a17a8.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/robot.7c4c3618.svg\";","import * as React from 'react'\n\ninterface PredictionBoxProps {\n    value: number;\n    text: string;\n}\n\nexport const PredictionBox = ({ value, text }) => {\n    return (\n        <div className=\"prediction-box\">\n            <span>{(value * 100).toFixed(2)}%</span>\n            <span>{text.replace(\"_\", \" \")}</span>\n        </div>\n    );\n}","export default __webpack_public_path__ + \"static/media/non-toxic.da73c7b4.svg\";","export default __webpack_public_path__ + \"static/media/toxic.e4ddd6bd.svg\";","import * as React from 'react'\nimport * as toxicity from '@tensorflow-models/toxicity'\nimport './style.css'\nimport * as tfcpu from '@tensorflow/tfjs-backend-cpu'\nimport { Button, Input, Loader } from 'semantic-ui-react'\nimport AI from '../../robot.svg'\nimport { PredictionBox } from './predictionBox'\nimport NonToxic from '../../non-toxic.svg'\nimport Toxic from '../../toxic.svg'\n\ninterface ToxicityProps {\n\n}\n\nexport const Toxicity = ({ }) => {\n    const [value, setValue] = React.useState<string>('')\n    const [predictionsList, setPredictionsList] = React.useState<{ label: string, results: { probabilities: Float32Array, match: boolean }[] }[]>()\n    const [loading, setLoading] = React.useState<boolean>(false)\n    const [toxic, setToxic] = React.useState<boolean>(null)\n\n    const managePredictions = (predictions: { label: string, results: { probabilities: Float32Array, match: boolean }[] }[]) => {\n        setPredictionsList(predictions)\n        // setLoading(false)\n\n    }\n    const run = () => {\n        setLoading(true)\n        const threshold = 0.9;\n        toxicity.load(threshold, []).then(model => {\n            const sentences = [value];\n            model.classify(sentences).then(predictions => {\n                console.log(predictions);\n                managePredictions(predictions)\n                let isToxic = false\n                for (let i = 0; i < 7; i++) {\n                    if (predictions[i].results[0].match) {\n                        isToxic = true\n                        console.log(predictions[i].label +\n                            \" was found with probability of \" +\n                            predictions[i].results[0].probabilities[1]);\n                    }\n                }\n                setToxic(isToxic)\n                setLoading(false)\n            });\n        });\n    }\n\n    const handleTextInput = (e) => {\n        setValue(e.target.value)\n    }\n    return (\n        <div className=\"toxicity-classifier-container\">\n            <div className=\"header\">\n                <img src={toxic === null ? AI : toxic === false ? NonToxic : Toxic} width=\"100px\"></img>\n                <span>Is this toxic?</span>\n            </div>\n            <div className=\"input-container\">\n                <Input fluid type=\"text\" size=\"big\" placeholder=\"...\" onChange={handleTextInput} value={value} action>\n                    <input />\n                    <Button positive onClick={run} icon=\"question\" loading={loading} />\n                </Input>\n                {/* <input className='sentence-input' value={value || ''} type=\"text\" onChange={handleTextInput} /> */}\n                {/* <div>{value}</div> */}\n            </div>\n            <div className=\"results\">\n\n                <div className=\"predictions\">\n                    {loading === true ? <Loader active={true} /> :\n                        predictionsList && predictionsList.map((p, index) => {\n                            return (\n                                <PredictionBox key={index} text={p.label} value={p.results[0].probabilities[1]} />\n\n                            )\n                        })\n                    }\n                </div>\n\n\n            </div>\n        </div>\n    );\n}","export default __webpack_public_path__ + \"static/media/jogging.16f25d6e.svg\";","import * as  React from 'react';\nimport 'semantic-ui-css/semantic.min.css'\n\n\nimport './App.css';\nimport { Toxicity } from './components/Toxicity';\nimport Running from './jogging.svg'\n\n// import { Canvas } from './components/Canvas';\n\n\nfunction App() {\n\n  return (\n    <div>\n      {/* <Canvas height={600} width={600}></Canvas> */}\n      {/* <CanvasAlt /> */}\n      <Toxicity />\n      <div className='footer'>\n        Made&nbsp;<img src={Running} width={20} />&nbsp;by &nbsp; <a href=\"https://www.muditsahni.com\" target=\"_blank\">Mudit Sahni</a>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}